
Le programme Monty

Utilisation : monty file
où file est le chemin d'accès au fichier contenant le byte code de Monty

Si l'utilisateur ne donne aucun fichier ou plus d'un argument à votre programme, 
imprimez le message d'erreur USAGE: monty file, suivi d'une nouvelle ligne, 
et quittez avec le statut EXIT_FAILURE

Si, pour une raison quelconque, il n'est pas possible d'ouvrir le fichier, 
imprimez le message d'erreur Erreur : Impossible d'ouvrir le fichier <fichier>, 
suivi d'une nouvelle ligne, et quittez avec le statut EXIT_FAILURE
où <fichier> est le nom du fichier

Si le fichier contient une instruction invalide, imprimez le message d'erreur L<line_number>: 
unknown instruction <opcode>, suivi d'une nouvelle ligne, et quittez avec le statut EXIT_FAILURE
où est le numéro de la ligne où apparaît l'instruction.

Les numéros de ligne commencent toujours à 1

Le programme monty exécute les bytecodes ligne par ligne et s'arrête si :
il a exécuté correctement chaque ligne du fichier
il trouve une erreur dans le fichier
une erreur s'est produite
Si vous ne pouvez plus malloc, imprimez le message d'erreur Error: malloc failed, 
suivi d'une nouvelle ligne, et quittez avec le statut EXIT_FAILURE.

Vous devez utiliser malloc et free et n'êtes autorisé à utiliser aucune autre fonction de 
man malloc (realloc, calloc, …)

##########################################################################################
15. stack, queue
#advanced
Implémentez les opcodes de pile et de file d'attente.

L'opcode de la pile

La pile d'opcodes définit le format des données sur une pile (LIFO). 
C'est le comportement par défaut du programme.

Utilisation : pile

L'opcode file d'attente

La file d'attente d'opcode définit le format des données dans une file d'attente (FIFO).

Utilisation : file d'attente
Lors du changement de mode :

Le haut de la pile devient le devant de la file d'attente
Le devant de la file d'attente devient le haut de la pile


Implement the stack and queue opcodes.

The stack opcode

The opcode stack sets the format of the data to a stack (LIFO). This is the default behavior of 
the program.

Usage: stack
The queue opcode

The opcode queue sets the format of the data to a queue (FIFO).

Usage: queue
When switching mode:

The top of the stack becomes the front of the queue
The front of the queue becomes the top of the stack
julien@ubuntu:~/monty$ cat bytecodes/47.m
queue
push 1
push 2
push 3
pall
stack
push 4
push 5
push 6
pall
add
pall
queue
push 11111
add
pall
julien@ubuntu:~/monty$ ./monty bytecodes/47.m
1
2
3
6
5
4
1
2
3
11
4
1
2
3
15
1
2
3
11111
julien@ubuntu:~/monty$ 
Repo:

GitHub repository: monty
  ////////////////////////////////////////////////////////////////////////////////////////////////
16. Brainf*ck
#advanced
Write a Brainf*ck script that prints School, followed by a new line.

All your Brainf*ck files should be stored inside the bf sub directory
You can install the bf interpreter to test your code: sudo apt-get install bf
Read: Brainf*ck
julien@ubuntu:~/monty/bf$ bf 1000-school.bf 
School
julien@ubuntu:~/monty/bf$ 
Repo:

GitHub repository: monty
Directory: bf
File: 1000-school.bf
  ///////////////////////////////////////////////////////////////////////////////////////////////
17. Add two digits
#advanced
Add two digits given by the user.

Read the two digits from stdin, add them, and print the result
The total of the two digits with be one digit-long (<10)
julien@ubuntu:~/monty/bf$ bf ./1001-add.bf
81
9julien@ubuntu:~/monty/bf$
Repo:

GitHub repository: monty
Directory: bf
File: 1001-add.bf
  ////////////////////////////////////////////////////////////////////////////////////////////
18. Multiplication
#advanced
Multiply two digits given by the user.

Read the two digits from stdin, multiply them, and print the result
The result of the multiplication will be one digit-long (<10)
julien@ubuntu:~/monty/bf$ bf 1002-mul.bf
24
8julien@ubuntu:~/monty/bf$
Repo:

GitHub repository: monty
Directory: bf
File: 1002-mul.bf
  ////////////////////////////////////////////////////////////////////////////////////////////////
19. Multiplication level up
#advanced
Multiply two digits given by the user.




Read the two digits from stdin, multiply them, and print the result, followed by a new line
julien@ubuntu:~/monty/bf$ bf 1003-mul.bf 
77
49
julien@ubuntu:~/monty/bf$ 
Repo:

GitHub repository: monty
Directory: bf
File: 1003-mul.bf
  
Copyright © 2022 ALX, All rights reserved.